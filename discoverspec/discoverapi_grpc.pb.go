// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package discoverspec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiscoverAPIClient is the client API for DiscoverAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscoverAPIClient interface {
	// WatchApplications starts watching the server for updates to the
	// availability of Dogma applications.
	//
	// When the call is first made the client sends a response for each
	// application that is currently available on the server. After this time the
	// server sends a response each time the availability of a specific
	// application changes.
	WatchApplications(ctx context.Context, in *WatchApplicationsRequest, opts ...grpc.CallOption) (DiscoverAPI_WatchApplicationsClient, error)
}

type discoverAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscoverAPIClient(cc grpc.ClientConnInterface) DiscoverAPIClient {
	return &discoverAPIClient{cc}
}

func (c *discoverAPIClient) WatchApplications(ctx context.Context, in *WatchApplicationsRequest, opts ...grpc.CallOption) (DiscoverAPI_WatchApplicationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DiscoverAPI_ServiceDesc.Streams[0], "/dogma.interop.v1.discover.DiscoverAPI/WatchApplications", opts...)
	if err != nil {
		return nil, err
	}
	x := &discoverAPIWatchApplicationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DiscoverAPI_WatchApplicationsClient interface {
	Recv() (*WatchApplicationsResponse, error)
	grpc.ClientStream
}

type discoverAPIWatchApplicationsClient struct {
	grpc.ClientStream
}

func (x *discoverAPIWatchApplicationsClient) Recv() (*WatchApplicationsResponse, error) {
	m := new(WatchApplicationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DiscoverAPIServer is the server API for DiscoverAPI service.
// All implementations should embed UnimplementedDiscoverAPIServer
// for forward compatibility
type DiscoverAPIServer interface {
	// WatchApplications starts watching the server for updates to the
	// availability of Dogma applications.
	//
	// When the call is first made the client sends a response for each
	// application that is currently available on the server. After this time the
	// server sends a response each time the availability of a specific
	// application changes.
	WatchApplications(*WatchApplicationsRequest, DiscoverAPI_WatchApplicationsServer) error
}

// UnimplementedDiscoverAPIServer should be embedded to have forward compatible implementations.
type UnimplementedDiscoverAPIServer struct {
}

func (UnimplementedDiscoverAPIServer) WatchApplications(*WatchApplicationsRequest, DiscoverAPI_WatchApplicationsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchApplications not implemented")
}

// UnsafeDiscoverAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscoverAPIServer will
// result in compilation errors.
type UnsafeDiscoverAPIServer interface {
	mustEmbedUnimplementedDiscoverAPIServer()
}

func RegisterDiscoverAPIServer(s grpc.ServiceRegistrar, srv DiscoverAPIServer) {
	s.RegisterService(&DiscoverAPI_ServiceDesc, srv)
}

func _DiscoverAPI_WatchApplications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchApplicationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiscoverAPIServer).WatchApplications(m, &discoverAPIWatchApplicationsServer{stream})
}

type DiscoverAPI_WatchApplicationsServer interface {
	Send(*WatchApplicationsResponse) error
	grpc.ServerStream
}

type discoverAPIWatchApplicationsServer struct {
	grpc.ServerStream
}

func (x *discoverAPIWatchApplicationsServer) Send(m *WatchApplicationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DiscoverAPI_ServiceDesc is the grpc.ServiceDesc for DiscoverAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiscoverAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dogma.interop.v1.discover.DiscoverAPI",
	HandlerType: (*DiscoverAPIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchApplications",
			Handler:       _DiscoverAPI_WatchApplications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/dogmatiq/interopspec/discoverspec/discoverapi.proto",
}
