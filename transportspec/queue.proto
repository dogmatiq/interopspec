syntax = "proto3";
package dogma.interop.v1.transport;

import "github.com/dogmatiq/interopspec/envelopespec/envelope.proto";
import "github.com/dogmatiq/interopspec/transportspec/messagetypes.proto";

option go_package = "github.com/dogmatiq/interopspec/transportspec";

// CommandQueue is a service for sending command messages between Dogma
// applications hosted on different engines.
//
// The service is bi-directional, meaning that clients of the service must
// implement the server as well.
//
// It models the concept of inbound and outbound command queues, though there is
// no requirement that engines use a queue, in the traditional sense.
service CommandQueue {
  // Enqueue adds a message to the inbound command queue.
  //
  // The client is an engine with a message on its outbound queue. The server is
  // an engine that hosts an application that can handle commands of that type.
  //
  // If the server does not host the application specified in the request, it
  // MUST return a NOT_FOUND error with an attached UnrecognizedApplication
  // value.
  //
  // If the server does not handle messages of the type provided in the request,
  // it MUST return an INVALID_ARGUMENT error with an attached
  // UnrecognizedMessage value.
  //
  // The server MUST keep the enqueued message on its inbound queue until it
  // removes the message from the client's outbound queue by calling Ack(). The
  // mechanism for determining how to dial back to the client is engine-specific
  // and outside the scope of this specification.
  //
  // If the message in the request, identified by the message ID, is not already
  // on the queue, it is added. A successful response MUST be returned
  // regardless of whether the message was already enqueued or not.
  //
  // The client SHOULD retry the Enqueue() oepration until it receives a
  // successful response, or until it receives an Ack() call for the message.
  rpc Enqueue(EnqueueRequest) returns (EnqueueResponse);

  // Ack removes a message from the outbound command queue.
  //
  // The client is an engine that has enqueued (and potentially already
  // executed) a message received via a prior call to Enqueue().
  //
  // If the message specified in the request is still on the outbound queue, it
  // is removed. A successful response MUST be returned regardless of whether
  // the message was still enqueued or not.
  //
  // Upon returning a successful response, the server MUST NOT make any future
  // call to Enqueue() for the specified message.
  rpc Ack(AckRequest) returns (AckResponse);

  // MessageTypes queries the messages types that the server supports for a
  // specific application.
  //
  // If the server does not host the application specified in the request, it
  // MUST return a NOT_FOUND error with an attached UnrecognizedApplication
  // value.
  rpc MessageTypes(dogma.interop.v1.transport.MessageTypesRequest)
      returns (dogma.interop.v1.transport.MessageTypesResponse);
}

message EnqueueRequest {
  // ApplicationKey is the identity key of the application that handles the
  // command.
  string application_key = 1;

  // Envelope is the envelope containing the command to be executed.
  dogma.interop.v1.envelope.Envelope envelope = 2;
}

message EnqueueResponse {}

message AckRequest {
  // ApplicationKey is the identity key of the application that produced the
  // command.
  string application_key = 1;

  // MessageID is the command message's unique identifier.
  string message_id = 2;
}

message AckResponse {}
