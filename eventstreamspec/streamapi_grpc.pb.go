// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: github.com/dogmatiq/interopspec/eventstreamspec/streamapi.proto

package eventstreamspec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StreamAPI_Consume_FullMethodName    = "/dogma.interop.v1.eventstream.StreamAPI/Consume"
	StreamAPI_EventTypes_FullMethodName = "/dogma.interop.v1.eventstream.StreamAPI/EventTypes"
)

// StreamAPIClient is the client API for StreamAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// StreamAPI is a service for consuming offset-based ordered streams of event
// messages.
type StreamAPIClient interface {
	// Consume starts consuming from a particular "start point" within an
	// application's event stream.
	//
	// The start point can be specified using different mechanisms. If the server
	// does not support the requested mechanism it MUST return an UNIMPLEMENTED
	// error with an attached UnimplementedStartPointMechanism value.
	//
	// If the requested start point is beyond the end of the application's event
	// stream, the server SHOULD keep the stream open and send new events as they
	// are produced.
	//
	// If the start point is requested in a manner not supported by the server, it
	// MUST return an UNIMPLEMENTED error with an attached UnsupportedStartPoint
	// value.
	//
	// If the server does not host the application specified in the request, it
	// MUST return a NOT_FOUND error with an attached UnrecognizedApplication
	// value.
	//
	// If any of the requested event types are not produced by the specified
	// application the server MUST return an INVALID_ARGUMENT error with an
	// attached UnrecognizedEventType value for each unrecognized event type.
	//
	// If none of the requested media-types for a given event type are supported
	// the server MUST return an INVALID_ARGUMENT error with an attached
	// NoRecognizedMediaTypes value for each such event type.
	Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ConsumeResponse], error)
	// EventTypes queries the event types that the server supports for a specific
	// application.
	//
	// If the server does not host the application specified in the request, it
	// MUST return a NOT_FOUND error with an attached UnrecognizedApplication
	// value.
	EventTypes(ctx context.Context, in *EventTypesRequest, opts ...grpc.CallOption) (*EventTypesResponse, error)
}

type streamAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamAPIClient(cc grpc.ClientConnInterface) StreamAPIClient {
	return &streamAPIClient{cc}
}

func (c *streamAPIClient) Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ConsumeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamAPI_ServiceDesc.Streams[0], StreamAPI_Consume_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ConsumeRequest, ConsumeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamAPI_ConsumeClient = grpc.ServerStreamingClient[ConsumeResponse]

func (c *streamAPIClient) EventTypes(ctx context.Context, in *EventTypesRequest, opts ...grpc.CallOption) (*EventTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventTypesResponse)
	err := c.cc.Invoke(ctx, StreamAPI_EventTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamAPIServer is the server API for StreamAPI service.
// All implementations should embed UnimplementedStreamAPIServer
// for forward compatibility.
//
// StreamAPI is a service for consuming offset-based ordered streams of event
// messages.
type StreamAPIServer interface {
	// Consume starts consuming from a particular "start point" within an
	// application's event stream.
	//
	// The start point can be specified using different mechanisms. If the server
	// does not support the requested mechanism it MUST return an UNIMPLEMENTED
	// error with an attached UnimplementedStartPointMechanism value.
	//
	// If the requested start point is beyond the end of the application's event
	// stream, the server SHOULD keep the stream open and send new events as they
	// are produced.
	//
	// If the start point is requested in a manner not supported by the server, it
	// MUST return an UNIMPLEMENTED error with an attached UnsupportedStartPoint
	// value.
	//
	// If the server does not host the application specified in the request, it
	// MUST return a NOT_FOUND error with an attached UnrecognizedApplication
	// value.
	//
	// If any of the requested event types are not produced by the specified
	// application the server MUST return an INVALID_ARGUMENT error with an
	// attached UnrecognizedEventType value for each unrecognized event type.
	//
	// If none of the requested media-types for a given event type are supported
	// the server MUST return an INVALID_ARGUMENT error with an attached
	// NoRecognizedMediaTypes value for each such event type.
	Consume(*ConsumeRequest, grpc.ServerStreamingServer[ConsumeResponse]) error
	// EventTypes queries the event types that the server supports for a specific
	// application.
	//
	// If the server does not host the application specified in the request, it
	// MUST return a NOT_FOUND error with an attached UnrecognizedApplication
	// value.
	EventTypes(context.Context, *EventTypesRequest) (*EventTypesResponse, error)
}

// UnimplementedStreamAPIServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamAPIServer struct{}

func (UnimplementedStreamAPIServer) Consume(*ConsumeRequest, grpc.ServerStreamingServer[ConsumeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Consume not implemented")
}
func (UnimplementedStreamAPIServer) EventTypes(context.Context, *EventTypesRequest) (*EventTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventTypes not implemented")
}
func (UnimplementedStreamAPIServer) testEmbeddedByValue() {}

// UnsafeStreamAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamAPIServer will
// result in compilation errors.
type UnsafeStreamAPIServer interface {
	mustEmbedUnimplementedStreamAPIServer()
}

func RegisterStreamAPIServer(s grpc.ServiceRegistrar, srv StreamAPIServer) {
	// If the following call pancis, it indicates UnimplementedStreamAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamAPI_ServiceDesc, srv)
}

func _StreamAPI_Consume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamAPIServer).Consume(m, &grpc.GenericServerStream[ConsumeRequest, ConsumeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamAPI_ConsumeServer = grpc.ServerStreamingServer[ConsumeResponse]

func _StreamAPI_EventTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamAPIServer).EventTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamAPI_EventTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamAPIServer).EventTypes(ctx, req.(*EventTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamAPI_ServiceDesc is the grpc.ServiceDesc for StreamAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dogma.interop.v1.eventstream.StreamAPI",
	HandlerType: (*StreamAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EventTypes",
			Handler:    _StreamAPI_EventTypes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Consume",
			Handler:       _StreamAPI_Consume_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/dogmatiq/interopspec/eventstreamspec/streamapi.proto",
}
