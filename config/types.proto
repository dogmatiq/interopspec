syntax = "proto3";
package dogma.interop.v1.config;

option go_package = "github.com/dogmatiq/interopspec/config";

// Identity is a protocol buffers representation of the configkit.Identity type.
message Identity {
  // Name is the entity's unique name.
  string name = 1;

  // Key is the entity's immutable, unique key.
  string key = 2;
}

// MessageRole is a protocol buffers representation of the
// configkit/message.Role enumeration.
enum MessageRole {
  UNKNOWN_MESSAGE_ROLE = 0;
  COMMAND = 1;
  EVENT = 2;
  TIMEOUT = 3;
}

// HandlerType is a protocol buffers representation of the configkit.HandlerType
// enumeration.
enum HandlerType {
  UNKNOWN_HANDLER_TYPE = 0;
  AGGREGATE = 1;
  PROCESS = 2;
  INTEGRATION = 3;
  PROJECTION = 4;
}

// Application is a protocol buffers representation of the configkit.Application
// interface.
message Application {
  // Identity is the application's identity.
  Identity identity = 1;

  // TypeName is the fully-qualified name of the Go type used to implement the
  // application.
  string type_name = 2;

  // Messages is an ordered-sequence of message name / role pairs.
  //
  // This directly correlates to the configkit.Application.MessageNames().Roles
  // value. The produced/consumed message names are not encoded directly in the
  // application, but rather rebuilt from the handlers when the application is
  // unmarshaled.
  repeated NameRole messages = 3;

  // Handlers is the set of handlers within the application.
  repeated Handler handlers = 4;
}

// NameRole is a 2-tuple containing a message name and its role.
message NameRole {
  // Name is the fully-qualified message name.
  bytes name = 1;

  // Role is the role this message plays within the application.
  MessageRole role = 2;
}

// Handler is a protocol buffers representation of the configkit.Handler
// interface.
message Handler {
  // Identity is the handler's identity.
  Identity identity = 1;

  // TypeName is the fully-qualified name of the Go type used to implement the
  // handler.
  string type_name = 2;

  // Type is the handler's type.
  HandlerType type = 3;

  // Produced is a list of the messages produced by this handler.
  // Each value is the index of a MessageRolePair within the application.
  repeated uint32 produced = 4;

  // Consumed is a list of the messages consumed by this handler.
  // Each value is the index of a MessageRolePair within the application.
  repeated uint32 consumed = 5;
}
