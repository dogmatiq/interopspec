// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: github.com/dogmatiq/interopspec/discoverspec/discoverapi.proto

package discoverspec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DiscoverAPI_WatchApplications_FullMethodName = "/dogma.interop.v1.discover.DiscoverAPI/WatchApplications"
)

// DiscoverAPIClient is the client API for DiscoverAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DiscoverAPI is a service for discovering the applications hosted on a server.
type DiscoverAPIClient interface {
	// WatchApplications starts watching the server for updates to the
	// availability of Dogma applications.
	//
	// When the call is first made the client sends a response for each
	// application that is currently available on the server. After this time the
	// server sends a response each time the availability of a specific
	// application changes.
	WatchApplications(ctx context.Context, in *WatchApplicationsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchApplicationsResponse], error)
}

type discoverAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscoverAPIClient(cc grpc.ClientConnInterface) DiscoverAPIClient {
	return &discoverAPIClient{cc}
}

func (c *discoverAPIClient) WatchApplications(ctx context.Context, in *WatchApplicationsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchApplicationsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DiscoverAPI_ServiceDesc.Streams[0], DiscoverAPI_WatchApplications_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WatchApplicationsRequest, WatchApplicationsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DiscoverAPI_WatchApplicationsClient = grpc.ServerStreamingClient[WatchApplicationsResponse]

// DiscoverAPIServer is the server API for DiscoverAPI service.
// All implementations should embed UnimplementedDiscoverAPIServer
// for forward compatibility.
//
// DiscoverAPI is a service for discovering the applications hosted on a server.
type DiscoverAPIServer interface {
	// WatchApplications starts watching the server for updates to the
	// availability of Dogma applications.
	//
	// When the call is first made the client sends a response for each
	// application that is currently available on the server. After this time the
	// server sends a response each time the availability of a specific
	// application changes.
	WatchApplications(*WatchApplicationsRequest, grpc.ServerStreamingServer[WatchApplicationsResponse]) error
}

// UnimplementedDiscoverAPIServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDiscoverAPIServer struct{}

func (UnimplementedDiscoverAPIServer) WatchApplications(*WatchApplicationsRequest, grpc.ServerStreamingServer[WatchApplicationsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method WatchApplications not implemented")
}
func (UnimplementedDiscoverAPIServer) testEmbeddedByValue() {}

// UnsafeDiscoverAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscoverAPIServer will
// result in compilation errors.
type UnsafeDiscoverAPIServer interface {
	mustEmbedUnimplementedDiscoverAPIServer()
}

func RegisterDiscoverAPIServer(s grpc.ServiceRegistrar, srv DiscoverAPIServer) {
	// If the following call pancis, it indicates UnimplementedDiscoverAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DiscoverAPI_ServiceDesc, srv)
}

func _DiscoverAPI_WatchApplications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchApplicationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiscoverAPIServer).WatchApplications(m, &grpc.GenericServerStream[WatchApplicationsRequest, WatchApplicationsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DiscoverAPI_WatchApplicationsServer = grpc.ServerStreamingServer[WatchApplicationsResponse]

// DiscoverAPI_ServiceDesc is the grpc.ServiceDesc for DiscoverAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiscoverAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dogma.interop.v1.discover.DiscoverAPI",
	HandlerType: (*DiscoverAPIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchApplications",
			Handler:       _DiscoverAPI_WatchApplications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/dogmatiq/interopspec/discoverspec/discoverapi.proto",
}
