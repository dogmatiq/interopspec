// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package configspec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigAPIClient is the client API for ConfigAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigAPIClient interface {
	// ListApplications returns the full configuration of all applications.
	ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error)
}

type configAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigAPIClient(cc grpc.ClientConnInterface) ConfigAPIClient {
	return &configAPIClient{cc}
}

func (c *configAPIClient) ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error) {
	out := new(ListApplicationsResponse)
	err := c.cc.Invoke(ctx, "/dogma.interop.v1.config.ConfigAPI/ListApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigAPIServer is the server API for ConfigAPI service.
// All implementations should embed UnimplementedConfigAPIServer
// for forward compatibility
type ConfigAPIServer interface {
	// ListApplications returns the full configuration of all applications.
	ListApplications(context.Context, *ListApplicationsRequest) (*ListApplicationsResponse, error)
}

// UnimplementedConfigAPIServer should be embedded to have forward compatible implementations.
type UnimplementedConfigAPIServer struct {
}

func (UnimplementedConfigAPIServer) ListApplications(context.Context, *ListApplicationsRequest) (*ListApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplications not implemented")
}

// UnsafeConfigAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigAPIServer will
// result in compilation errors.
type UnsafeConfigAPIServer interface {
	mustEmbedUnimplementedConfigAPIServer()
}

func RegisterConfigAPIServer(s grpc.ServiceRegistrar, srv ConfigAPIServer) {
	s.RegisterService(&ConfigAPI_ServiceDesc, srv)
}

func _ConfigAPI_ListApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigAPIServer).ListApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dogma.interop.v1.config.ConfigAPI/ListApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigAPIServer).ListApplications(ctx, req.(*ListApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigAPI_ServiceDesc is the grpc.ServiceDesc for ConfigAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dogma.interop.v1.config.ConfigAPI",
	HandlerType: (*ConfigAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListApplications",
			Handler:    _ConfigAPI_ListApplications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/dogmatiq/interopspec/configspec/configapi.proto",
}
