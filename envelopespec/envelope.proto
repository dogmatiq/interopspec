syntax = "proto3";
package dogma.interop.v1.envelope;

option go_package = "github.com/dogmatiq/interopspec/envelopespec";

// Identity is the identity of a Dogma application or handler.
message Identity {
  // Name is the entity's unique name.
  string name = 1;

  // Key is the entity's immutable, unique key.
  string key = 2;
}

// Envelope is a container for a marshaled message and it meta-data.
message Envelope {
  // MessageId is a unique identifier for the message.
  string message_id = 1;

  // CausationId is the ID of the message that was the direct cause of the
  // message in this envelope.
  string causation_id = 2;

  // CorrelationId is the ID of the first ancestor of the message in this
  // envelope that was not caused by another message.
  string correlation_id = 3;

  // SourceApplication is the identity of the Dogma application that produced
  // the message in this envelope.
  Identity source_application = 4;

  // SourceHandler is the identity of the Dogma handler that produced the
  // message in this envelope. It is the zero-value if the message was not
  // produced by a handler.
  Identity source_handler = 5;

  // SourceInstanceId is the ID of the aggregate or process instance that
  // produced the message in this envelope. It is empty if the message was not
  // produced by a handler, or it was produced by an integration handler.
  string source_instance_id = 6;

  // CreatedAt is the time at which the message was created, marshaled in
  // RFC-3339 format, with nanoseconds.
  string created_at = 7;

  // ScheduledFor is the time at which a timeout message is scheduled to be
  // handled, marshaled in RFC-3339 format, with nanoseconds.
  string scheduled_for = 8;

  // Description is a human-readable description of the message.
  string description = 9;

  // PortableName is the unique name used to identify messages of this type.
  string portable_name = 10;

  // MediaType is a MIME media-type describing the content and encoding of the
  // binary message data.
  string media_type = 11;

  // Data is the binary message data.
  bytes data = 12;
}
